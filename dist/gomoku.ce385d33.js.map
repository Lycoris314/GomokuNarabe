{"version":3,"sources":["global.ts","gomoku.ts"],"names":[],"mappings":"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","file":"gomoku.ce385d33.js","sourceRoot":"..\\src","sourcesContent":["export const STONE = {\r\n    NONE: 0,\r\n    FIRST: 1,\r\n    SECOND: 2,\r\n    WALL: -1,\r\n};\r\n\r\nexport const GAME_STATE = {\r\n    PENDING: 0,\r\n    WIN: 1,\r\n    DRAW: 2,\r\n};\r\n","import { GAME_STATE, STONE } from \"./global\";\r\n\r\nexport class GomokuNarabe {\r\n    #field: number[][];\r\n    #turn: number;\r\n    #size: number;\r\n\r\n    constructor(n: number) {\r\n        this.#size = n;\r\n        this.#turn = STONE.FIRST;\r\n        this.#field = new Array(n + 2)\r\n            .fill(null)\r\n            .map((_) => new Array(n + 2).fill(STONE.NONE));\r\n        for (let i = 0; i < n + 2; i++) {\r\n            this.#field[i][0] = STONE.WALL;\r\n            this.#field[i][n + 1] = STONE.WALL;\r\n            this.#field[0][i] = STONE.WALL;\r\n            this.#field[n + 1][i] = STONE.WALL;\r\n        }\r\n    }\r\n\r\n    get field() {\r\n        return this.#field.slice(1, -1).map((arr) => arr.slice(1, -1));\r\n    }\r\n    get turn() {\r\n        return this.#turn;\r\n    }\r\n    get size() {\r\n        return this.#size;\r\n    }\r\n\r\n    getOpponentTurn() {\r\n        return this.turn === STONE.FIRST ? STONE.SECOND : STONE.FIRST;\r\n    }\r\n\r\n    putStone(row: number, col: number) {\r\n        if (this.#field[row][col] !== STONE.NONE) {\r\n            return null;\r\n        } else {\r\n            this.#field[row][col] = this.#turn;\r\n            const state = this.checkGameState(\r\n                row,\r\n                col,\r\n                this.#field,\r\n                this.#turn\r\n            );\r\n            this.#turn = this.getOpponentTurn();\r\n            return state;\r\n        }\r\n    }\r\n\r\n    checkGameState(r: number, c: number, field: number[][], turn: number) {\r\n        if (countStone([0, 1]) + countStone([0, -1]) >= 4) {\r\n            return GAME_STATE.WIN;\r\n        } else if (countStone([1, 0]) + countStone([-1, 0]) >= 4) {\r\n            return GAME_STATE.WIN;\r\n        } else if (countStone([1, 1]) + countStone([-1, -1]) >= 4) {\r\n            return GAME_STATE.WIN;\r\n        } else if (countStone([1, -1]) + countStone([-1, 1]) >= 4) {\r\n            return GAME_STATE.WIN;\r\n        } else if (\r\n            field.every((arr) => {\r\n                return arr.every((e) => e !== STONE.NONE);\r\n            })\r\n        ) {\r\n            return GAME_STATE.DRAW;\r\n        } else {\r\n            return GAME_STATE.PENDING;\r\n        }\r\n\r\n        //dir方向に同種の石がいくつ連続してあるか数える\r\n        function countStone(dir: [number, number]) {\r\n            let row = r;\r\n            let col = c;\r\n            let count = 0;\r\n            rec();\r\n            function rec() {\r\n                row += dir[0];\r\n                col += dir[1];\r\n                if (field[row][col] !== turn) {\r\n                    return;\r\n                }\r\n                count++;\r\n                rec();\r\n            }\r\n            return count;\r\n        }\r\n    }\r\n\r\n    //COMの次の一手\r\n    comNext() {\r\n        //boxには空のマスのリストを入れる\r\n        let box: number[] | [] = [];\r\n        for (let i = 1; i <= this.#size; i++) {\r\n            for (let j = 1; j <= this.#size; j++) {\r\n                if (this.#field[i][j] == STONE.NONE) {\r\n                    box.push([i, j] as never);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let elm of box) {\r\n            let [i, j] = [elm[0], elm[1]];\r\n            let field = structuredClone(this.#field);\r\n            field[i][j] = this.turn;\r\n            if (\r\n                this.checkGameState(i, j, field, this.turn) === GAME_STATE.WIN\r\n            ) {\r\n                return [i - 1, j - 1];\r\n            }\r\n        }\r\n\r\n        for (let elm of box) {\r\n            let [i, j] = [elm[0], elm[1]];\r\n            let field = structuredClone(this.#field);\r\n            field[i][j] = this.getOpponentTurn();\r\n            if (\r\n                this.checkGameState(i, j, field, this.getOpponentTurn()) ===\r\n                GAME_STATE.WIN\r\n            ) {\r\n                return [i - 1, j - 1];\r\n            }\r\n        }\r\n\r\n        for (let elm of box) {\r\n            let [i, j] = [elm[0], elm[1]];\r\n            let field = structuredClone(this.#field);\r\n            field[i][j] = this.turn;\r\n            const gsa = this.getStoneArray(i, j, field, this.turn);\r\n            let idx = gsa.counts.findIndex((e) => e == 3);\r\n            if (idx >= 0 && gsa.noneEnds[idx] > 0) {\r\n                if (gsa.noneEnds[idx] == 1 && Math.random() < 0.5) {\r\n                    continue;\r\n                }\r\n                return [i - 1, j - 1];\r\n            }\r\n        }\r\n\r\n        for (let elm of box) {\r\n            let [i, j] = [elm[0], elm[1]];\r\n            let field = structuredClone(this.#field);\r\n            field[i][j] = this.getOpponentTurn();\r\n            const gsa = this.getStoneArray(i, j, field, this.getOpponentTurn());\r\n            let idx = gsa.counts.findIndex((e) => e == 3);\r\n            if (idx >= 0 && gsa.noneEnds[idx] == 2) {\r\n                return [i - 1, j - 1];\r\n            }\r\n        }\r\n\r\n        for (let elm of box) {\r\n            let [i, j] = [elm[0], elm[1]];\r\n            let field = structuredClone(this.#field);\r\n            field[i][j] = this.turn;\r\n            const gsa = this.getStoneArray(i, j, field, this.turn);\r\n\r\n            let idx = gsa.counts.findIndex((e) => e == 2);\r\n            if (idx >= 0 && gsa.noneEnds[idx] == 2) {\r\n                return [i - 1, j - 1];\r\n            }\r\n        }\r\n\r\n        for (let elm of box) {\r\n            let [i, j] = [elm[0], elm[1]];\r\n            let field = structuredClone(this.#field);\r\n            field[i][j] = this.turn;\r\n            const gsa = this.getStoneArray(i, j, field, this.turn);\r\n            let idx2 = gsa.counts.findIndex((e) => e == 1);\r\n            let idx3 = gsa.counts.findIndex((e, i) => e == 1 && i > idx2);\r\n            if (\r\n                idx2 >= 0 &&\r\n                gsa.noneEnds[idx2] == 2 &&\r\n                idx3 >= 0 &&\r\n                gsa.noneEnds[idx3] == 2\r\n            ) {\r\n                return [i - 1, j - 1];\r\n            }\r\n        }\r\n\r\n        let midIndex = Math.floor(box.length / 2);\r\n        let [i, j] = [box[midIndex][0], box[midIndex][1]];\r\n        return [i - 1, j - 1];\r\n    }\r\n\r\n    //横方向、縦方向、斜め方向×2　の４方向について同種の石が連続している数およびその両端が空マスである数を計算してリストにして返す。\r\n    getStoneArray(r: number, c: number, field: number[][], turn: number) {\r\n        let countBox = [];\r\n        let noneEndBox = [];\r\n        countBox.push(\r\n            (countStone([0, 1]).count + countStone([0, -1]).count) as never\r\n        );\r\n        noneEndBox.push(\r\n            (countStone([0, 1]).noneEnd + countStone([0, -1]).noneEnd) as never\r\n        );\r\n        countBox.push(\r\n            (countStone([1, 0]).count + countStone([-1, 0]).count) as never\r\n        );\r\n        noneEndBox.push(\r\n            (countStone([1, 0]).noneEnd + countStone([-1, 0]).noneEnd) as never\r\n        );\r\n        countBox.push(\r\n            (countStone([1, 1]).count + countStone([-1, -1]).count) as never\r\n        );\r\n        noneEndBox.push(\r\n            (countStone([1, 1]).noneEnd + countStone([-1, -1]).noneEnd) as never\r\n        );\r\n        countBox.push(\r\n            (countStone([1, -1]).count + countStone([-1, 1]).count) as never\r\n        );\r\n        noneEndBox.push(\r\n            (countStone([1, -1]).noneEnd + countStone([-1, 1]).noneEnd) as never\r\n        );\r\n\r\n        return { counts: countBox, noneEnds: noneEndBox };\r\n\r\n        //dir方向に同種の石が連続して何個あるか(count)、さらにその直後が空マスかどうか(空マスのときnoneEndは1)を返す。\r\n        function countStone(dir: [number, number]) {\r\n            let row = r;\r\n            let col = c;\r\n            let count = 0;\r\n            let noneEnd = 0;\r\n            rec();\r\n            function rec() {\r\n                row += dir[0];\r\n                col += dir[1];\r\n                if (field[row][col] !== turn) {\r\n                    noneEnd = field[row][col] == STONE.NONE ? 1 : 0;\r\n                    return;\r\n                }\r\n                count++;\r\n                rec();\r\n            }\r\n            return { count: count, noneEnd: noneEnd };\r\n        }\r\n    }\r\n}\r\n"]}